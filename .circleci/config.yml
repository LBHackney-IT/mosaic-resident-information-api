version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@3.0.0
  aws-cli: circleci/aws-cli@0.1.9
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
      docker:
        - image: circleci/python:3.7
      working_directory: /home/circleci/project
  docker-terraform:
     docker:
       -  image: "hashicorp/terraform:light"
     working_directory: /home/circleci/project
  docker-dotnet:
     docker:
       - image: mcr.microsoft.com/dotnet/core/sdk:3.1
     working_directory: /home/circleci/project
commands:
  terraform-init-then-apply:
    description: "Initializes and applies terraform configuration"
    parameters:
      aws-account:
        type: string
      aws-role-name:
        type: string
    steps:
       - run:
          command: |
            cd ./terraform/
            terraform get -update=true
            terraform init
          name: get and init
       - run:
          name: apply
          command: |
            cd ./terraform/ 
            terraform apply -auto-approve


  deploy-lambda:
    description: "Deploys API via Serverless"
    parameters:
      stage:
        type: string
      aws-account:
        type: string
      aws-role-name:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: NPM Install
          command: npm install
      - run:
          name: Install serverless CLI
          command: npm i -g serverless
      - run:
          name: Build lamdba
          command: |
            cd ./MosaicResidentInformationApi/
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy lamdba
          command: |
            cd ./MosaicResidentInformationApi/
            sls deploy --stage <<parameters.stage>> --aws-profile default

jobs:
  terraform-init-and-apply-to-development:
    executor: docker-terraform
    steps:
      - checkout
      - terraform-init-then-apply:
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  terraform-init-and-apply-to-staging:
    executor: docker-terraform
    steps:
      - attach_workspace:
          at: /home/circleci
      - checkout
      - terraform-init-then-apply:
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_STAGING
  terraform-init-and-apply-to-production:
    executor: docker-terraform
    steps:
      - checkout
      - terraform-init-then-apply:
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_PRODUCTION
  assume-role-development:
     executor: docker-python
     steps:
       - checkout
       - aws_assume_role/assume_role:
             account: $AWS_ACCOUNT_DEVELOPMENT
             profile_name: default
             role: 'LBH_Circle_CI_Deployment_Role'
  assume-role-staging:
     executor: docker-python
     steps:
       - checkout
       - aws_assume_role/assume_role:
             account: $AWS_ACCOUNT_STAGING
             profile_name: default
             role: 'LBH_Circle_CI_Deployment_Role'
       - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project
            - .aws
            - credentials
  assume-role-production:
     executor: docker-python
     steps:
       - checkout
       - aws_assume_role/assume_role:
             account: $AWS_ACCOUNT_PRODUCTION
             profile_name: default
             role: 'LBH_Circle_CI_Deployment_Role'
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --dry-run --check

  build-and-test:
    executor: docker-python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build
          command: docker-compose build mosaic-resident-information-api-test
      - run:
         name: Run tests
         command: docker-compose run mosaic-resident-information-api-test
  deploy-to-development:
    executor: docker-python
    steps:
      - deploy-lambda:
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
          stage: 'development'
  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - attach_workspace:
          at: /home/circleci/project/code
      - deploy-lambda:
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_STAGING
          stage: 'staging'
  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_PRODUCTION
          stage: 'production'
  build_and_push_image_development:
    executor: aws-ecr/default
    steps:
      - build_and_push_image:
          dockerfile: ./MosaicResidentInformationApi/Dockerfile
          path: ./MosaicResidentInformationApi
          account-url: AWS_ECR_HOST_DEVELOPMENT
          repo: $AWS_ECR_PATH_DEV
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  build_and_push_image_staging:
    executor: aws-ecr/default
    steps:
      - build_and_push_image:
          dockerfile: ./MosaicResidentInformationApi/Dockerfile
          path: $PROJECT_PATH
          account-url: AWS_ECR_HOST_STAGING
          repo: $AWS_ECR_PATH_STAGING
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_STAGING
  build_and_push_image_production:
    executor: aws-ecr/default
    steps:
      - build_and_push_image:
          dockerfile: ./MosaicResidentInformationApi/Dockerfile
          path: $PROJECT_PATH
          account-url: AWS_ECR_HOST_PRODUCTION
          repo: $AWS_ECR_PATH_PRODUCTION
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_PRODUCTION

workflows:
  check-and-deploy:
      jobs:
      - check-code-formatting
      - build-and-test
      - assume-role-development:
          context: api-assume-role-development-context
          requires:
              - build-and-test
          filters:
             branches:
               only: development
      - terraform-init-and-apply-to-development:
          context: api-assume-role-development-context
          requires:
              - assume-role-development
          filters:
             branches:
               only: development
      - deploy-to-development:
          context: api-assume-role-development-context
          requires:
            - build-and-test
          filters:
            branches:
              only: development
  check-and-deploy-staging-and-production:
       jobs:
#       - build-and-test:
#           filters:
#             branches:
#               only: test-pipeline-data-persist
       - assume-role-staging:
           context: api-assume-role-staging-context
#           requires:
#               - build-and-test
           filters:
              branches:
                only: test-pipeline-data-persist
       - terraform-init-and-apply-to-staging:
           requires:
             - assume-role-staging
           filters:
             branches:
               only: test-pipeline-data-persist
       - deploy-to-staging:
           requires:
             - assume-role-staging
           filters:
             branches:
               only: test-pipeline-data-persist
  #     - permit-production-terraform-release:
  #         type: approval
  #         requires:
  #           - deploy-to-staging
  #     - assume-role-production:
  #         context: api-assume-role-production-context
  #         requires:
  #             - permit-production-terraform-release
  #         filters:
  #            branches:
  #              only: master
  #     - terraform-init-and-apply-to-production:
  #         requires:
  #           - assume-role-production
  #         filters:
  #           branches:
  #             only: master
  #     - permit-production-release:
  #         type: approval
  #         requires:
  #           - deploy-to-staging
  #         filters:
  #           branches:
  #             only: master
  #     - deploy-to-production:
  #         context: api-assume-role-production-context
  #         requires:
  #           - permit-production-release
  #         filters:
  #           branches:
  #             only: master
